function-definition: 
   declaration-specifiersopt declarator declaration-listopt compound-statement  


declaration: 
   declaration-specifiers init-declarator-listopt ; 


declaration-list: 
   declaration  
   declaration-list declaration  


type-specifier: one of 
   void int signed unsigned   


type-qualifier: one of 
   const volatile  


init-declarator-list: 
   init-declarator  
   init-declarator-list , init-declarator  


init-declarator: 
   declarator  
   declarator = initializer  

specifier-qualifier-list: 
   type-specifier specifier-qualifier-listopt  
   type-qualifier specifier-qualifier-listopt  


declarator: 
   pointeropt direct-declarator  


direct-declarator: 
   identifier  
   ( declarator )  
   direct-declarator [ constant-expressionopt ]  
   direct-declarator ( parameter-type-list )  
   direct-declarator ( identifier-listopt )  


type-qualifier-list: 
   type-qualifier  
   type-qualifier-list type-qualifier  


parameter-type-list: 
   parameter-list  
   parameter-list , ...  


parameter-list: 
   parameter-declaration  
   parameter-list , parameter-declaration  


parameter-declaration: 
   declaration-specifiers declarator  
   declaration-specifiers abstract-declaratoropt  


identifier-list: 
   identifier  
   identifier-list , identifier  


initializer: 
   assignment-expression  
   { initializer-list }  
   { initializer-list , }  


initializer-list: 
   initializer  
   initializer-list , initializer  


type-name: 
   specifier-qualifier-list abstract-declaratoropt  


abstract-declarator: 
   pointer  
   pointeropt direct-abstract-declarator  


direct-abstract-declarator: 
   ( abstract-declarator )  
   direct-abstract-declaratoropt [ constant-expressionopt ]  
   direct-abstract-declaratoropt ( parameter-type-listopt )  


typedef-name: 
   identifier  


statement: 
   labeled-statement  
   expression-statement  
   compound-statement  
   selection-statement  
   iteration-statement  
   jump-statement  


labeled-statement: 
   identifier : statement  
   case constant-expression : statement  
   default : statement  


expression-statement: 
   expressionopt ; 


compound-statement: 
   { declaration-listopt statement-listopt }  

statement-list: 
   statement  
   statement-list statement  

selection-statement: 
   if ( expression ) statement  
   if ( expression ) statement else statement  
   switch ( expression ) statement  

iteration-statement: 
   while ( expression ) statement  
   do statement while ( expression ) ; 

jump-statement: 
   goto identifier ; 
   continue ;  
   break ;  
   return expressionopt ;

expression: 
   assignment-expression  
   expression , assignment-expression  

assignment-expression: 
   conditional-expression  

conditional-expression: 
   logical-OR-expression  

constant-expression: 
   conditional-expression  

logical-OR-expression: 
   logical-AND-expression  
   logical-OR-expression || logical-AND-expression  

logical-AND-expression: 
   inclusive-OR-expression  
   logical-AND-expression && inclusive-OR-expression  

inclusive-OR-expression: 
   exclusive-OR-expression  
   inclusive-OR-expression | exclusive-OR-expression  

exclusive-OR-expression: 
   AND-expression  
   exclusive-OR-expression ^ AND-expression  

AND-expression: 
   equality-expression  
   AND-expression & equality-expression  

equality-expression: 
   relational-expression  
   equality-expression == relational-expression  
   equality-expression != relational-expression  

relational-expression: 
   shift-expression  
   relational-expression < shift-expression  
   relational-expression > shift-expression  
   relational-expression <= shift-expression  
   relational-expression >= shift-expression  

shift-expression: 
   additive-expression  
   shift-expression << additive-expression  
   shift-expression >> additive-expression  

additive-expression: 
   multiplicative-expression  
   additive-expression + multiplicative-expression  
   additive-expression - multiplicative-expression  

multiplicative-expression: 
   multiplicative-expression * cast-expression  
   multiplicative-expression / cast-expression  
   multiplicative-expression % cast-expression  

unary-expression: 
   postfix-expression  
   ++ unary-expression  
   -- unary-expression  

unary-operator:  one of 
   &  *  +  -  ~   !  

postfix-expression: 
   primary-expression  
   postfix-expression [ expression ]  
   postfix-expression ( argument-expression-listopt ) 
   postfix-expression ++  
   postfix-expression --  

primary-expression: 
   identifier  
   constant  
   ( expression )  

argument-expression-list: 
   assignment-expression  
   argument-expression-list , assignment-expression  

constant: 
   integer-constant  
